// Copyright to Avram Traian. 2022 - 2022.
// File created on September 2 2022.

#pragma once

#include "RendererLogs.h"
#include "Core/Containers/Ref.h"

#include "RenderingContext.h"
#include "Swapchain.h"
#include "Shader.h"
#include "Pipeline.h"
#include "Framebuffer.h"

namespace Leaf { namespace Renderer {

	enum class Result : int32
	{
		Success = 1,
		Failure
	};

	enum class API
	{
		None = 0,
		Vulkan,
		D3D11, D3D12,
		Metal,
		OpenGL
	};

	struct RendererConfiguration
	{
		API RenderingAPI = API::None;
	};
	LEAF_API extern RendererConfiguration Config;

	bool Initialize();

	void Shutdown();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////// RENDERING CONTEXT /////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	Result CreateRenderingContext(Ref<RenderingContext>& out_rendering_context, const RenderingContextSpecification& specification);

	Result RenderingContextCreateSwapchain(Weak<RenderingContext> rendering_context, const SwapchainSpecification& specification);

	LEAF_API Weak<RenderingContext> GetActiveRenderingContext();

	void SetActiveRenderingContext(Weak<RenderingContext> rendering_context);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////// PIPELINE ////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	LEAF_API Result CreatePipeline(Ref<Pipeline>& out_pipeline, const PipelineSpecification& specification);

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////// FRAMEBUFFER ///////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	LEAF_API Result CreateFramebuffer(Ref<Framebuffer>& out_framebuffer, const FrambufferSpecification& specification);

} }